function [dist, path] = dijkstra(neighbors,s,t)

F = [s];
%V = cell(s);
V = Inf(s,1);
V(s)=0;
%V{s}=0;
E = [];
P = [];

 

while length(F)>0
    mini = Inf;
    i = 0;
    for k =1:length(V)
        if V(k)<mini && any(k==F)
            mini = V(k);
            i = k;
        end
    end
    val = V(k);
    %[val,i] = min(V(F))
    F = F(F~=i); 
   
    E = union(E,i); 
    if i== t
        break
    end
    [Nx, WNx] = neighbors(i);
    for k=1:length(Nx)
        j = Nx{k};
        if ~any(j==F) && ~any(j==E)
            if j>length(V)
                Vnew = Inf(j,1);
                Pnew = zeros(j,1);
                Vnew(1:length(V),1) = V;
                Pnew(1:length(P),1) = P;
                V = Vnew;
                P = Pnew;
            end            
            V(j) = V(i) + WNx(k);
            P(j) = i;
            F = union(F,j);
        elseif any(j==F)
            if val+WNx(k)<V(j)
               P(j) = i;
            end
            V(j) = min(V(j),val+WNx(k));
            
        elseif V(j) > val + WNx(k)
             if j>length(V)
                Vnew = Inf(j,1);
                Pnew = zeros(j,1);
                Vnew(1:length(V),1) = V;
                Pnew(1:length(P),1) = P;
                V = Vnew;
                P = Pnew;
             end 
            V(j) = val + WNx(k);
            P(j) = i;
            E = E(E~=j);
            F = union(F,j);
        end
    end

end    
dist = V(t);
%construct path backwards
i =0;
path = [t];
j = t;
while i~=s && j~=s
    vor = P(j);
    path = [vor path];
    j = vor;
end

end